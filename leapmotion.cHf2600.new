#include <linux/kernel.h>
#include <linux/errno.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/kref.h>
#include <linux/uaccess.h>
#include <linux/usb.h>
#include <linux/mutex.h>


/* Define these values to match your devices */
#define USB_LEAP_VENDOR_ID	0xf182
#define USB_LEAP_PRODUCT_ID	0x0003

#define USB_LEAP_MINOR_BASE	0
#define WRITES_IN_FLIGHT	8

/* table of devices that work with this driver */
static const struct usb_device_id leap_table[] = {
	{ USB_DEVICE(USB_LEAP_VENDOR_ID, USB_LEAP_PRODUCT_ID) },
	{ }					/* Terminating entry */
};
MODULE_DEVICE_TABLE(usb, leap_table);

struct usb_leap {
	struct usb_device	*udev;			/* the usb device for this device */
	struct usb_interface	*interface;		/* the interface for this device */
	struct semaphore	limit_sem;		/* limiting the number of writes in progress */
	struct usb_anchor	submitted;		/* in case we need to retract our submissions */
	struct urb		*bulk_in_urb;		/* the urb to read data with */
	unsigned char           *bulk_in_buffer;	/* the buffer to receive data */
	size_t			bulk_in_size;		/* the size of the receive buffer */
	size_t			bulk_in_filled;		/* number of bytes in the buffer */
	size_t			bulk_in_copied;		/* already copied to user space */
	__u8			bulk_in_endpointAddr;	/* the address of the bulk in endpoint */
	__u8			bulk_out_endpointAddr;	/* the address of the bulk out endpoint */
	int			errors;			/* the last request tanked */
	bool			ongoing_read;		/* a read is going on */
	spinlock_t		err_lock;		/* lock for errors */
	struct kref		kref;
	struct mutex		io_mutex;		/* synchronize I/O with disconnect */
	wait_queue_head_t	bulk_in_wait;		/* to wait for an ongoing read */
};
#define to_leap_dev(d) container_of(d, struct usb_leap, kref)

static struct usb_driver leap_driver;
static void leap_draw_down(struct usb_leap *dev);

static void leap_delete(struct kref *kref)
{
	struct usb_leap *dev = to_leap_dev(kref);
	
	usb_free_urb(dev->bulk_in_urb);
	usb_put_dev(dev->udev);
	kfree(dev->bulk_in_buffer);
	kfree(dev);
}

static int leap_open(struct inode *inode, struct file *file)
{
	struct usb_leap *dev;
	struct usb_interface *interface;
	int subminor;
	int retval = 0;
	
	subminor = iminor(inode);
	
	interface = usb_find_interface(&leap_driver, subminor);
	if (!interface) {
		printk("Error, can't find device for minor %d\n",subminor);
		retval = -ENODEV;
		goto exit;
	}
	
	dev = usb_get_intfdata(interface);
	if (!dev) {
		retval = -ENODEV;
		goto exit;
	}
	
	retval = usb_autopm_get_interface(interface);
	if (retval)
		goto exit;
	
	/* increment our usage count for the device */
	kref_get(&dev->kref);
	
	/* save our object in the file's private structure */
	file->private_data = dev;
	
	printk("Am reusit sa deschid device-ul!");
	
exit:
	return retval;
}

static const struct file_operations leap_fops = {
	.owner =	THIS_MODULE,
	.open =		leap_open,
	.llseek =	noop_llseek,
/*
	.read =		skel_read,
	.write =	skel_write,
	
	.release =	skel_release,
	.flush =	skel_flush,
	.llseek =	noop_llseek,*/
};

/*
 * usb class driver info in order to get a minor number from the usb core,
 * and to have the device registered with the driver core
 */
static struct usb_class_driver leap_class = {
	.name =		"leap%d",
	.fops =		&leap_fops,
	.minor_base =	USB_LEAP_MINOR_BASE,
};

static int leap_probe(struct usb_interface *interface,
					  const struct usb_device_id *id)
{
	printk("Probing!\n");
	struct usb_leap *dev;
	struct usb_host_interface *iface_desc;
	struct usb_endpoint_descriptor *endpoint;
	size_t buffer_size;
	int i;
	int retval = -ENOMEM;
	
	/* allocate memory for our device state and initialize it */
	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
	if (!dev) {
		printk("Out of memory\n");
		goto error;
	}
	
	dev->bulk_in_endpointAddr = 0;
	dev->bulk_out_endpointAddr = 0;
	
	kref_init(&dev->kref);
	sema_init(&dev->limit_sem, WRITES_IN_FLIGHT);
	mutex_init(&dev->io_mutex);
	spin_lock_init(&dev->err_lock);
	init_usb_anchor(&dev->submitted);
	init_waitqueue_head(&dev->bulk_in_wait);
	
	dev->udev = usb_get_dev(interface_to_usbdev(interface));
	dev->interface = interface;
	
	/* save our data pointer in this interface device */
	usb_set_intfdata(interface, dev);
	
	/* we can register the device now, as it is ready */
	retval = usb_register_dev(interface, &leap_class);
	if (retval) {
		/* something prevented us from registering this driver */
		printk("Not able to get a minor for this device.\n");
		usb_set_intfdata(interface, NULL);
		goto error;
	}
	
	if(interface->minor == 0x01){
		printk("SUNT IN RAI!\n");
		int rc = usb_control_msg(dev->udev,0,1,0x21,0x0800,1280,NULL,0,100);
		if(!rc){
			printk("Nu am putut trimite mesajul de control!");
			goto error;
		}
	}
	
	/* let the user know what node this device is now attached to */
	printk("USB Leapmotion device now attached to USBLeap-%d\n",interface->minor);
	return 0;

error:
	if (dev)
		/* this frees allocated memory */
		kref_put(&dev->kref, leap_delete);
	return retval;
}

static void leap_disconnect(struct usb_interface *interface)
{
	struct usb_leap *dev;
	int minor = interface->minor;
	
	dev = usb_get_intfdata(interface);
	usb_set_intfdata(interface, NULL);
	
	/* give back our minor */
	usb_deregister_dev(interface, &leap_class);
	
	/* prevent more I/O from starting */
	mutex_lock(&dev->io_mutex);
	dev->interface = NULL;
	mutex_unlock(&dev->io_mutex);
	
	usb_kill_anchored_urbs(&dev->submitted);
	
	/* decrement our usage count */
	kref_put(&dev->kref, leap_delete);
	
	printk("USB Leapmotion #%d now disconnected\n", minor);
}

static void leap_draw_down(struct usb_leap *dev)
{
	
}

static struct usb_driver leap_driver = {
	.name =		"leap",
	.probe =	leap_probe,
	.disconnect =	leap_disconnect,
	.id_table =	leap_table,
	.supports_autosuspend = 1,
};

module_usb_driver(leap_driver);

MODULE_LICENSE("GPL");